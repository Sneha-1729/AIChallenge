# -*- coding: utf-8 -*-
"""AIChallenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1enpk8WAcAyPINdCXwNvBycWcQrOs74YT
"""

from google.colab import files
uploaded = files.upload()

import os
import pandas as pd
file_path = "monatszahlen2405_verkehrsunfaelle_export_31_05_24_r (2).csv"
if os.path.exists(file_path):
    data = pd.read_csv(file_path)
else:
    print(f"File not found: {file_path}")

print(data.head())
print(data.info())

data_filtered = data.copy()  # Replace 'data' with your actual DataFrame

print(data_cleaned.shape)
print(data_cleaned.head())

data_cleaned['MONAT'] = pd.to_numeric(data_cleaned['MONAT'], errors='coerce')

data_cleaned = data_cleaned.dropna(subset=['MONAT'])
data_cleaned = data_cleaned[data_cleaned['MONAT'].between(1, 12)]

print(data_filtered.isnull().sum())

# Drop rows with missing values in 'WERT'
data_filtered = data_filtered.dropna(subset=['WERT'])
data_filtered['WERT'] = pd.to_numeric(data_filtered['WERT'], errors='coerce')

data_filtered=data_filtered.copy()
data_filtered['Date']=pd.to_datetime(data_filtered['JAHR'].astype(str)+'-'+data_filtered['MONAT'].astype(str)+'-01',errors='coerce')

print(data_filtered.columns)

# Check for issues in data
print(data_filtered.head())
print(data_filtered.isnull().sum())

# Ensure 'Date' is datetime and 'WERT' is numeric
data_filtered['Date'] = pd.to_datetime(data_filtered['Date'], errors='coerce')
data_filtered['WERT'] = pd.to_numeric(data_filtered['WERT'], errors='coerce')

# Drop rows with missing values in critical columns
data_filtered = data_filtered.dropna(subset=['MONATSZAHL', 'Date', 'WERT'])

# Group the data
grouped_data = data_filtered.groupby(['MONATSZAHL', 'Date'])['WERT'].sum().reset_index()
print(grouped_data.head())

# Removing invalid rows
data_filtered = data_filtered[data_filtered['MONAT'].apply(lambda x: str(x).isdigit())]

data_filtered['MONAT'] = data_filtered['MONAT'].astype(str).str[-2:].astype(int)

data_filtered['Date'] = pd.to_datetime(data_filtered['JAHR'].astype(str) + '-' + data_filtered['MONAT'].astype(str) + '-01', errors='coerce')

print(data_filtered[['JAHR', 'MONAT', 'Date']].head())

grouped_data = data_filtered.groupby(['MONATSZAHL', 'Date'])['WERT'].sum().reset_index()



import matplotlib.pyplot as plt

pivot_data = grouped_data.pivot(index='Date', columns='MONATSZAHL', values='WERT')

# Checking ig there is any empty data
if pivot_data.empty:
    print("No data available to plot.")
else:
    plt.figure(figsize=(12, 6))
    for category in pivot_data.columns:
        plt.plot(pivot_data.index, pivot_data[category], label=category)

    plt.title('Historical Number of Accidents per Category')
    plt.xlabel('Date')
    plt.ylabel('Number of Accidents')
    plt.legend(title='Accident Categories')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
    plt.savefig('visualization.png')

from google.colab import files
files.download('visualization.png')

print(data_filtered['MONATSZAHL'].unique())
print(data_filtered['WERT'].describe())

print(data['MONATSZAHL'].unique())
print(data['AUSPRAEGUNG'].unique())
print(data['JAHR'].unique())
print(data['MONAT'].unique())

!pip freeze > requirements.txt

from google.colab import files
files.download('requirements.txt')