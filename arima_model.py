# -*- coding: utf-8 -*-
"""Prediction value.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NRKNZ2cySJsiUoLpetDcEa4EvTMYSiOn
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the uploaded file to examine its structure and content
file_path = 'monatszahlen2405_verkehrsunfaelle_export_31_05_24_r (2).csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
data.head()

# Filter data for "Alkoholunfälle" and "insgesamt"
filtered_data = data[(data['MONATSZAHL'] == 'Alkoholunfälle') & (data['AUSPRAEGUNG'] == 'insgesamt')]

# Drop rows with NaN values in the relevant columns to ensure valid data for analysis
filtered_data = filtered_data.dropna(subset=['WERT'])

# Convert year and month into a datetime object for time series analysis
filtered_data['Date'] = pd.to_datetime(filtered_data['JAHR'].astype(str) + filtered_data['MONAT'].astype(str), format='%Y%m')

# Set 'Date' as the index
filtered_data.set_index('Date', inplace=True)

# Keep only the 'WERT' column for forecasting
time_series_data = filtered_data['WERT']

# Display the filtered time series data for reference
time_series_data.head()

# Remove rows where 'MONAT' contains non-numeric values
filtered_data = filtered_data[filtered_data['MONAT'].apply(lambda x: str(x).isdigit())]

# Convert the 'MONAT' column to integer type for proper formatting
filtered_data['MONAT'] = filtered_data['MONAT'].astype(int)

# Reattempt to create the 'Date' column and set it as the index
filtered_data['Date'] = pd.to_datetime(filtered_data['JAHR'].astype(str) + filtered_data['MONAT'].astype(str).str.zfill(2), format='%Y%m')
filtered_data.set_index('Date', inplace=True)

# Keep only the 'WERT' column for forecasting
time_series_data = filtered_data['WERT']

# Display the filtered time series data for reference
time_series_data.head()

# Inspect unique values in 'JAHR' and 'MONAT' to identify potential formatting issues
unique_years = filtered_data['JAHR'].unique()
unique_months = filtered_data['MONAT'].unique()

unique_years, unique_months

# Extract the month part from 'MONAT' (last two digits)
filtered_data['MONAT'] = filtered_data['MONAT'].astype(str).str[-2:].astype(int)

# Reattempt to create the 'Date' column and set it as the index
filtered_data['Date'] = pd.to_datetime(filtered_data['JAHR'].astype(str) + filtered_data['MONAT'].astype(str).str.zfill(2), format='%Y%m')
filtered_data.set_index('Date', inplace=True)

# Keep only the 'WERT' column for forecasting
time_series_data = filtered_data['WERT']

# Display the filtered time series data for reference
time_series_data.head()

from statsmodels.tsa.arima.model import ARIMA

# Ensure the data is sorted by date for proper modeling
time_series_data = time_series_data.sort_index()

# Fit an ARIMA model (simple parameters for demonstration, can be fine-tuned)
model = ARIMA(time_series_data, order=(1, 1, 1))
model_fit = model.fit()

# Forecast the value for January 2021
forecast_date = pd.Timestamp('2021-01-01')
forecast = model_fit.predict(start=forecast_date, end=forecast_date)

forecast_value = forecast.iloc[0]
forecast_value